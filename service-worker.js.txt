const CACHE_NAME = "todo-cache-v2"; // Cambia la versión cuando actualices archivos

// Evento de instalación: se encarga de cachear los archivos necesarios
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll([
        "./", // Asegura que la raíz también se cachee
        "index.html",
        "css/style.css",
        "js/script.js",
        "images/icon-192x192.png",
        "images/icon-512x512.png"
      ]);
    })
  );
  self.skipWaiting(); // Activa el nuevo service worker inmediatamente
});

// Evento de activación: se encarga de eliminar las versiones antiguas del caché
self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cache) => {
          if (cache !== CACHE_NAME) {
            return caches.delete(cache);
          }
        })
      );
    })
  );
  self.clients.claim(); // Reclama el control sobre todas las pestañas abiertas
});

// Evento de "fetch": sirve los archivos desde el caché si están disponibles, o los obtiene de la red
self.addEventListener("fetch", (event) => {
  if (event.request.url.startsWith(self.location.origin)) {
    event.respondWith(
      caches.match(event.request).then((response) => {
        return response || fetch(event.request); // Si no se encuentra en caché, lo obtiene de la red
      })
    );
  }
});

